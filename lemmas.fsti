val lemma_div_def: a:nat -> b:pos -> Lemma (a = b * (a/b) + a % b)
val slash_decr_axiom: a:nat -> b:pos -> Lemma (a / b <= a)
val slash_star_axiom: a:nat -> b:pos -> c:nat -> Lemma (requires (a * b = c)) (ensures  (a = c / b))
val abs_mul_lemma: a:int -> b:int -> Lemma ((abs (a * b)) = (abs a) * (abs b))
val signed_modulo_property: v:int -> p:pos -> Lemma ((abs (signed_modulo v p )) < p)
val div_non_eucl_decr_lemma: a:int -> b:pos -> Lemma ((abs (div_non_eucl a b)) <= (abs a))
val div_non_eucl_bigger_denom_lemma: a:int -> b:pos -> Lemma (requires (b > (abs a))) (ensures  ((div_non_eucl a b) = 0))
val powx_lemma1: a:int -> Lemma ((powx a 1) = a)
val powx_lemma2: x:int -> n:nat -> m:nat -> Lemma ((powx x n) * (powx x m) = (powx x (n + m)))